{"version":3,"sources":["components/helpers/GetGifs.js","components/AddCategory.js","components/GifGridItem.js","components/hooks/useFetchGif.js","components/GifGrid.js","GifExpert.js","index.js"],"names":["getGifs","serie","a","url","encodeURI","fetch","response","json","data","newData","map","img","id","title","images","downsized_medium","AddCategory","setSeries","useState","category","setCategory","onSubmit","e","preventDefault","trim","length","series","console","log","value","onChange","target","GifGridItem","className","src","alt","require","useEffect","GifGrid","loading","state","setState","then","useFetchGif","image","key","GifExpert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAEaA,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIEI,MAAMF,GAJR,cAIfG,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KACFC,EAAUD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAChC,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAG,UAAEA,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,uD,iGC2BLO,EA1BK,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EACLC,mBAAS,IADJ,mBAC9BC,EAD8B,KACpBC,EADoB,KAgBrC,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACEJ,EAASK,OAAOC,OAAS,IAC3BR,GAAU,SAACS,GAAD,OAAaP,GAAb,mBAA0BO,OACpCC,QAAQC,IAAI,gBACZR,EAAY,OAMZ,2BAAOS,MAAOV,EAAUW,SAfL,SAACR,GACtBF,EAAYE,EAAES,OAAOF,YCSVG,EAbK,SAAC,GAAuB,EAArBpB,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOF,EAAU,EAAVA,IAChC,OACE,yBAAKsB,UAAU,oDACb,yBAAKA,UAAU,cACb,yBAAKC,IAAKvB,EAAKwB,IAAI,mBAErB,6BACE,2BAAItB,M,ECRoBuB,EAAQ,GAAhClB,E,EAAAA,SAAUmB,E,EAAAA,UACVrC,EAAYoC,EAAQ,IAApBpC,QCmBOsC,EAjBC,SAAC,GAAe,IAAbrC,EAAY,EAAZA,MAAY,EDAJ,SAACA,GAAW,IAAD,EACViB,EAAS,CACjCV,KAAM,GACN+B,SAAS,IAHyB,mBAC7BC,EAD6B,KACtBC,EADsB,KAepC,OATAJ,GAAU,WACRrC,EAAQC,GAAOyC,MAAK,SAAClC,GACnBiC,EAAS,CACPjC,OACA+B,SAAS,SAGZ,CAACtC,IAEGuC,ECd2BG,CAAY1C,GAAhCa,EADe,EACrBN,KAAc+B,EADO,EACPA,QACtB,OACE,6BACE,yBAAKN,UAAU,SACb,4BAAKhC,GACJsC,EAAU,sCAAiB,MAE9B,yBAAKN,UAAU,aACZnB,EAAOJ,KAAI,SAACkC,GACX,OAAO,kBAAC,EAAD,eAAaC,IAAKD,EAAMhC,IAAQgC,UCOlCE,EAjBG,WAAO,IAAD,EACM5B,mBAAS,CAAC,gBADhB,mBACfQ,EADe,KACPT,EADO,KAGtB,OACE,oCACE,2CACA,kBAAC,EAAD,CAAaA,UAAWA,IACxB,6BACA,4BACGS,EAAOhB,KAAI,SAACT,GACX,OAAO,kBAAC,EAAD,CAASA,MAAOA,EAAO4C,IAAK5C,UCT7C8C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.72c3df92.chunk.js","sourcesContent":["/** @format */\n\nexport const getGifs = async (serie) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    serie\n  )}&api_key=sOJllrDGcZJXdwLlklqNhLSUXKEe6M2V&limit=10`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n  const newData = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      img: img.images?.downsized_medium.url,\n    };\n  });\n\n  return newData;\n};\n","/** @format */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nconst AddCategory = ({ setSeries }) => {\n  const [category, setCategory] = useState(\"\");\n\n  const handleOnChange = (e) => {\n    setCategory(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (category.trim().length > 2) {\n      setSeries((series) => [category, ...series]);\n      console.log(\"Submit hecho\");\n      setCategory(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={category} onChange={handleOnChange} />\n    </form>\n  );\n};\nAddCategory.propTypes = {\n  setSeries: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","/** @format */\nimport React from \"react\";\n\nconst GifGridItem = ({ id, title, img }) => {\n  return (\n    <div className=\"container-card animate__animated animate__fadeIn\">\n      <div className=\"image-card\">\n        <img src={img} alt=\"gif de imagen\" />\n      </div>\n      <div>\n        <p>{title}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","/** @format */\n\nconst { useState, useEffect } = require(\"react\");\nconst { getGifs } = require(\"../helpers/GetGifs\");\n\nexport const useFetchGif = (serie) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(serie).then((data) => {\n      setState({\n        data,\n        loading: false,\n      });\n    });\n  }, [serie]);\n\n  return state;\n};\n","/** @format */\nimport React from \"react\";\nimport GifGridItem from \"./GifGridItem\";\nimport { useFetchGif } from \"./hooks/useFetchGif\";\n\nconst GifGrid = ({ serie }) => {\n  const { data: images, loading } = useFetchGif(serie);\n  return (\n    <div>\n      <div className=\"title\">\n        <h1>{serie}</h1>\n        {loading ? <p>Loading</p> : null}\n      </div>\n      <div className=\"list-card\">\n        {images.map((image) => {\n          return <GifGridItem key={image.id} {...image} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default GifGrid;\n","/** @format */\nimport React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpert = () => {\n  const [series, setSeries] = useState([\"Dragon ball\"]);\n\n  return (\n    <>\n      <h1>Gift expert</h1>\n      <AddCategory setSeries={setSeries} />\n      <hr />\n      <ol>\n        {series.map((serie) => {\n          return <GifGrid serie={serie} key={serie} />;\n        })}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpert;\n","/** @format */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpert from \"./GifExpert\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpert />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}